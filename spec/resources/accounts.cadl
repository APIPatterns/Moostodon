import "../models/account.cadl";
import "../models/status.cadl";
namespace Mastodon;
using Cadl.Http;


interface AccountsService {
  // Register a new account.
  @post createAccount(@body body: CreateAccountBody): Account | UnauthorizedResponse;

  // Verify credentials and get current user.
  @route("verify_credentials")
  @get verifyCredentials(): Account | UnauthorizedResponse;

  // Update account credentials.
  @route("update_credentials")
  @patch updateCredentials(@body body: UpdateCredentialsBody): Account | UnauthorizedResponse | UnprocessableContentError;

  // Search for accounts.
  @route("search")
  @get search(@query q: string, @query limit: int32, @query following: boolean, @query resolve: boolean): Account[] | UnauthorizedResponse;

  // Lookup an account
  @route("lookup")
  @get lookup(@query acct: string, @query skip_webfinger: boolean): Account | NotFoundResponse;

  // Get account relationships
  @route("relationships")
  @get getRelationships( @query id: string[]): Relationship[] | UnauthorizedResponse | UnprocessableContentError;

  // Find familiar followers
  @route("familiar_followers")
  @get getFamiliarFollowers( @query id: string[]): FamiliarFollowers[] | UnauthorizedResponse | UnprocessableContentError; 

}

model FamiliarFollowers {
  id: string;
  followers: Account[];
}

model UpdateCredentialsBody {
  discoverable: boolean;
  bot: boolean;
  display_name: string;
  note: string;
  avatar: string;
  header: string;
  locked: boolean;
  source: Source;
  fields: Field[];
}

model CreateAccountBody {
  @header contentType: "application/form-data";
  username: string;
  email: string;
  password: string;
  agreement: boolean;
  locale: string;
  reason: string;
}

interface AccountService {
  // Get an account.
  @get getAccount(@path id: string): Account | NotFoundResponse | UnauthorizedResponse | GoneResponse;

  // Update an account.
  @patch updateAccount( @path id: string, 
                        @body body: Account): Account | UnauthorizedResponse | ForbiddenResponse | NotFoundResponse;

  // Get an account's status
  @route("statuses")
  @get getStatuses( @path id: string,  
                    ...RangeParameters,
                    @query exclude_reblogs: boolean,
                    @query tagged: string ): Status[] | UnauthorizedResponse |NotFoundResponse | GoneResponse;

  // Get an account's followers.
  @route("followers")
  @get getFollowers( @path id: string, ...RangeParameters): Account[] | UnauthorizedResponse | NotFoundResponse | GoneResponse;
  
  // Get an account's following
  @route("following")
  @get getFollowing( @path id: string, ...RangeParameters,): Account[] | UnauthorizedResponse | NotFoundResponse | GoneResponse;


  // Get an account's featured tags
  @route("featured_tags")
  @get getFeaturedTags( @path id: string): FeaturedTag[] | UnauthorizedResponse | NotFoundResponse | GoneResponse;

  // Get lists containing this account
  @route("lists")
  @get getLists( @path id: string): AccountList[] | UnauthorizedResponse | NotFoundResponse | GoneResponse | UnprocessableContentError;

  // Follow Account
  @route("follow")
  @post follow( @path id: string, @body body: FollowBody): Relationship | UnauthorizedResponse | NotFoundResponse | GoneResponse | UnprocessableContentError;

  // Unfollow Account
  @route("unfollow")
  @post unfollow( @path id: string): Relationship | UnauthorizedResponse | UnprocessableContentError;

  // Remove Account from followers
  @route("remove_from_followers")
  @post removeFromFollowers( @path id: string): Relationship | UnauthorizedResponse | UnprocessableContentError;

  // Block Account
  @route("block")
  @post block( @path id: string): Relationship | UnauthorizedResponse | UnprocessableContentError;

  // Unblock Account
  @route("unblock")
  @post unblock( @path id: string): Relationship | UnauthorizedResponse | UnprocessableContentError;

  // Mute Account
  @route("mute")
  @post mute( @path id: string, @body body: MuteBody): Relationship | UnauthorizedResponse | UnprocessableContentError;

  // Unmute Account
  @route("unmute")
  @post unmute( @path id: string): Relationship | UnauthorizedResponse | UnprocessableContentError;

  //pin Account
  @route("pin")
  @post pin( @path id: string): Relationship | UnauthorizedResponse | ForbiddenResponse | UnprocessableContentError;

  //unpin Account
  @route("unpin")
  @post unpin( @path id: string): Relationship | UnauthorizedResponse | ForbiddenResponse | UnprocessableContentError;

  // Set note
  @route("note")
  @post setNote( @path id: string, @body body: SetNoteBody): Relationship | UnauthorizedResponse | UnprocessableContentError;

}

model SetNoteBody {
  comment: string;
}

model MuteBody {
  notifications: boolean;
  duration: int32;
}